{"ast":null,"code":"// import { useReducer } from 'react';\nimport { UPDATE_PRODUCTS, ADD_TO_CART, UPDATE_CART_QUANTITY, REMOVE_FROM_CART, ADD_MULTIPLE_TO_CART, UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, CLEAR_CART, TOGGLE_CART } from './actions';\nconst initialState = {\n  products: [],\n  cart: [],\n  cartOpen: false,\n  categories: [],\n  currentCategory: ''\n}; // The reducer is a function that accepts the current state and an action. It returns a new state based on that action.\n\nexport default function reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    // Returns a copy of state with an update products array. We use the action.products property and spread it's contents into the new array.\n    case UPDATE_PRODUCTS:\n      return { ...state,\n        products: [...action.products]\n      };\n\n    case ADD_TO_CART:\n      return { ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product]\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return { ...state,\n        cart: [...state.cart, ...action.products]\n      };\n    // Returns a copy of state, sets the cartOpen to true and maps through the items in the cart.\n    // If the item's `id` matches the `id` that was provided in the action.payload, we update the purchase quantity.\n\n    case UPDATE_CART_QUANTITY:\n      return { ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n\n          return product;\n        })\n      };\n    // First we iterate through each item in the cart and check to see if the `product._id` matches the `action._id`\n    // If so, we remove it from our cart and set the updated state to a variable called `newState`\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      }); // Then we return a copy of state and check to see if the cart is empty.\n      // If not, we set the cartOpen status to  `true`. Then we return an updated cart array set to the value of `newState`.\n\n      return { ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n\n    case CLEAR_CART:\n      return { ...state,\n        cartOpen: false,\n        cart: []\n      };\n\n    case TOGGLE_CART:\n      return { ...state,\n        cartOpen: !state.cartOpen\n      };\n\n    case UPDATE_CATEGORIES:\n      return { ...state,\n        categories: [...action.categories]\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return { ...state,\n        currentCategory: action.currentCategory\n      };\n    // Return the state as is in the event that the `action.type` passed to our reducer was not accounted for by the developers\n    // This saves us from a crash.\n\n    default:\n      return state;\n  }\n}\n; // export function useProductReducer(initialState) {\n//   return useReducer(reducer, initialState);\n// }","map":{"version":3,"names":["UPDATE_PRODUCTS","ADD_TO_CART","UPDATE_CART_QUANTITY","REMOVE_FROM_CART","ADD_MULTIPLE_TO_CART","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","CLEAR_CART","TOGGLE_CART","initialState","products","cart","cartOpen","categories","currentCategory","reducer","state","action","type","product","map","_id","purchaseQuantity","newState","filter","length"],"sources":["C:/Users/Julian/UTOR-VIRT-FSF-FT-01-2022-U-LOL/22-State/02-Homework/Solved/client/src/utils/reducers.js"],"sourcesContent":["// import { useReducer } from 'react';\nimport {\n  UPDATE_PRODUCTS,\n  ADD_TO_CART,\n  UPDATE_CART_QUANTITY,\n  REMOVE_FROM_CART,\n  ADD_MULTIPLE_TO_CART,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  CLEAR_CART,\n  TOGGLE_CART,\n} from './actions';\n\nconst initialState = {\n  products: [],\n  cart: [],\n  cartOpen: false,\n  categories: [],\n  currentCategory: '',\n}\n\n// The reducer is a function that accepts the current state and an action. It returns a new state based on that action.\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    // Returns a copy of state with an update products array. We use the action.products property and spread it's contents into the new array.\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products],\n      };\n\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product],\n      };\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n    // Returns a copy of state, sets the cartOpen to true and maps through the items in the cart.\n    // If the item's `id` matches the `id` that was provided in the action.payload, we update the purchase quantity.\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map((product) => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        }),\n      };\n\n    // First we iterate through each item in the cart and check to see if the `product._id` matches the `action._id`\n    // If so, we remove it from our cart and set the updated state to a variable called `newState`\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter((product) => {\n        return product._id !== action._id;\n      });\n\n      // Then we return a copy of state and check to see if the cart is empty.\n      // If not, we set the cartOpen status to  `true`. Then we return an updated cart array set to the value of `newState`.\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState,\n      };\n\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: [],\n      };\n\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen,\n      };\n\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory,\n      };\n\n    // Return the state as is in the event that the `action.type` passed to our reducer was not accounted for by the developers\n    // This saves us from a crash.\n    default:\n      return state;\n  }\n};\n\n// export function useProductReducer(initialState) {\n//   return useReducer(reducer, initialState);\n// }\n"],"mappings":"AAAA;AACA,SACEA,eADF,EAEEC,WAFF,EAGEC,oBAHF,EAIEC,gBAJF,EAKEC,oBALF,EAMEC,iBANF,EAOEC,uBAPF,EAQEC,UARF,EASEC,WATF,QAUO,WAVP;AAYA,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,EADS;EAEnBC,IAAI,EAAE,EAFa;EAGnBC,QAAQ,EAAE,KAHS;EAInBC,UAAU,EAAE,EAJO;EAKnBC,eAAe,EAAE;AALE,CAArB,C,CAQA;;AACA,eAAe,SAASC,OAAT,GAA+C;EAAA,IAA9BC,KAA8B,uEAAtBP,YAAsB;EAAA,IAARQ,MAAQ;;EAC5D,QAAQA,MAAM,CAACC,IAAf;IACE;IACA,KAAKlB,eAAL;MACE,OAAO,EACL,GAAGgB,KADE;QAELN,QAAQ,EAAE,CAAC,GAAGO,MAAM,CAACP,QAAX;MAFL,CAAP;;IAKF,KAAKT,WAAL;MACE,OAAO,EACL,GAAGe,KADE;QAELJ,QAAQ,EAAE,IAFL;QAGLD,IAAI,EAAE,CAAC,GAAGK,KAAK,CAACL,IAAV,EAAgBM,MAAM,CAACE,OAAvB;MAHD,CAAP;;IAKF,KAAKf,oBAAL;MACE,OAAO,EACL,GAAGY,KADE;QAELL,IAAI,EAAE,CAAC,GAAGK,KAAK,CAACL,IAAV,EAAgB,GAAGM,MAAM,CAACP,QAA1B;MAFD,CAAP;IAIF;IACA;;IACA,KAAKR,oBAAL;MACE,OAAO,EACL,GAAGc,KADE;QAELJ,QAAQ,EAAE,IAFL;QAGLD,IAAI,EAAEK,KAAK,CAACL,IAAN,CAAWS,GAAX,CAAgBD,OAAD,IAAa;UAChC,IAAIF,MAAM,CAACI,GAAP,KAAeF,OAAO,CAACE,GAA3B,EAAgC;YAC9BF,OAAO,CAACG,gBAAR,GAA2BL,MAAM,CAACK,gBAAlC;UACD;;UACD,OAAOH,OAAP;QACD,CALK;MAHD,CAAP;IAWF;IACA;;IACA,KAAKhB,gBAAL;MACE,IAAIoB,QAAQ,GAAGP,KAAK,CAACL,IAAN,CAAWa,MAAX,CAAmBL,OAAD,IAAa;QAC5C,OAAOA,OAAO,CAACE,GAAR,KAAgBJ,MAAM,CAACI,GAA9B;MACD,CAFc,CAAf,CADF,CAKE;MACA;;MACA,OAAO,EACL,GAAGL,KADE;QAELJ,QAAQ,EAAEW,QAAQ,CAACE,MAAT,GAAkB,CAFvB;QAGLd,IAAI,EAAEY;MAHD,CAAP;;IAMF,KAAKhB,UAAL;MACE,OAAO,EACL,GAAGS,KADE;QAELJ,QAAQ,EAAE,KAFL;QAGLD,IAAI,EAAE;MAHD,CAAP;;IAMF,KAAKH,WAAL;MACE,OAAO,EACL,GAAGQ,KADE;QAELJ,QAAQ,EAAE,CAACI,KAAK,CAACJ;MAFZ,CAAP;;IAKF,KAAKP,iBAAL;MACE,OAAO,EACL,GAAGW,KADE;QAELH,UAAU,EAAE,CAAC,GAAGI,MAAM,CAACJ,UAAX;MAFP,CAAP;;IAKF,KAAKP,uBAAL;MACE,OAAO,EACL,GAAGU,KADE;QAELF,eAAe,EAAEG,MAAM,CAACH;MAFnB,CAAP;IAKF;IACA;;IACA;MACE,OAAOE,KAAP;EA5EJ;AA8ED;AAAA,C,CAED;AACA;AACA"},"metadata":{},"sourceType":"module"}